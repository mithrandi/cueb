// Generated by CoffeeScript 1.3.3
var AppView, Sheet, SheetView, Track, TrackCollection, TrackView, divMod, formatTimestamp, twoDigits,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Sheet = (function(_super) {

  __extends(Sheet, _super);

  function Sheet() {
    return Sheet.__super__.constructor.apply(this, arguments);
  }

  Sheet.prototype.defaults = function() {
    return {
      filename: '',
      filetype: 'WAVE',
      artist: '',
      title: ''
    };
  };

  Sheet.prototype.initialize = function() {
    return this.tracks = new TrackCollection;
  };

  Sheet.prototype.flatten = function() {
    var index, lastDuration, lines, timestamp,
      _this = this;
    lines = ["PERFORMER \"" + (this.get('artist')) + "\"", "TITLE \"" + (this.get('title')) + "\"", "FILE \"" + (this.get('filename')) + "\" " + (this.get('filetype'))];
    timestamp = 0;
    index = 1;
    lastDuration = 0;
    this.tracks.each(function(track) {
      var result;
      result = track.flatten(index, timestamp, _this.get('artist'));
      lines = lines.concat(result);
      timestamp += track.getDuration();
      return index += 1;
    });
    return lines.join('\n');
  };

  return Sheet;

})(Backbone.Model);

twoDigits = function(index) {
  return (index < 10 ? '0' : '') + index;
};

divMod = function(n, r) {
  return [Math.floor(n / r), n % r];
};

formatTimestamp = function(timestamp) {
  var frames, minutes, seconds, _ref;
  _ref = divMod(timestamp, 60), minutes = _ref[0], timestamp = _ref[1];
  seconds = Math.floor(timestamp);
  frames = Math.floor((timestamp - seconds) * 75);
  return twoDigits(minutes) + ':' + twoDigits(seconds) + ':' + twoDigits(frames);
};

Track = (function(_super) {

  __extends(Track, _super);

  function Track() {
    return Track.__super__.constructor.apply(this, arguments);
  }

  Track.prototype.defaults = {
    title: '',
    artist: '',
    hours: 0,
    minutes: 0,
    seconds: 0
  };

  Track.prototype.setDuration = function(hours, minutes, seconds) {
    return this.set('duration');
  };

  Track.prototype.getDuration = function() {
    return this.get('hours') * 3600 + this.get('minutes') * 60 + this.get('seconds');
  };

  Track.prototype.flatten = function(index, timestamp, sheetArtist) {
    return ["  TRACK " + (twoDigits(index)) + " AUDIO", "    TITLE \"" + (this.get('title')) + "\"", "    PERFORMER \"" + (this.get('artist') || sheetArtist) + "\"", "    INDEX 01 " + (formatTimestamp(timestamp))];
  };

  return Track;

})(Backbone.Model);

AppView = (function(_super) {

  __extends(AppView, _super);

  function AppView() {
    return AppView.__super__.constructor.apply(this, arguments);
  }

  AppView.prototype.el = '#app';

  AppView.prototype.initialize = function() {
    return this.sheetView = new SheetView({
      model: this.options.sheet
    });
  };

  AppView.prototype.render = function() {
    this.sheetView.render();
    return this;
  };

  return AppView;

})(Backbone.View);

SheetView = (function(_super) {

  __extends(SheetView, _super);

  function SheetView() {
    return SheetView.__super__.constructor.apply(this, arguments);
  }

  SheetView.prototype.el = '#app';

  SheetView.prototype.template = _.template($('#sheet-template').html());

  SheetView.prototype.events = {
    'change #main input': 'changed',
    'click #add': 'addTrack',
    'focus #cue': 'focused',
    'change #cue': 'cueEdited'
  };

  SheetView.prototype.initialize = function() {
    this.model.on('change', this.render, this);
    this.model.tracks.on('add', this.trackAdded, this);
    this.model.tracks.on('change', this.render, this);
    return this.model.tracks.on('remove', this.render, this);
  };

  SheetView.prototype.render = function() {
    this.$('#main').html(this.template(this.model.toJSON()));
    this.$('#cue').val(this.model.flatten());
    return this;
  };

  SheetView.prototype.changed = function(event) {
    var elem;
    elem = event.target;
    return this.model.set(elem.id, elem.value);
  };

  SheetView.prototype.focused = function(event) {
    return event.target.select();
  };

  SheetView.prototype.cueEdited = function(event) {};

  SheetView.prototype.addTrack = function() {
    this.model.tracks.create();
    return false;
  };

  SheetView.prototype.trackAdded = function(track) {
    var view;
    view = new TrackView({
      model: track
    });
    this.$('#tracks').append(view.render().el);
    return this.render();
  };

  return SheetView;

})(Backbone.View);

TrackCollection = (function(_super) {

  __extends(TrackCollection, _super);

  function TrackCollection() {
    return TrackCollection.__super__.constructor.apply(this, arguments);
  }

  TrackCollection.prototype.model = Track;

  TrackCollection.prototype.url = 'dummy';

  return TrackCollection;

})(Backbone.Collection);

TrackView = (function(_super) {

  __extends(TrackView, _super);

  function TrackView() {
    return TrackView.__super__.constructor.apply(this, arguments);
  }

  TrackView.prototype.tagName = 'li';

  TrackView.prototype.template = _.template($('#track-template').html());

  TrackView.prototype.events = {
    'change input': 'changed',
    'click .track-action-remove': 'remove'
  };

  TrackView.prototype.initialize = function() {
    return this.model.on('remove', this.removed, this);
  };

  TrackView.prototype.render = function() {
    this.$el.html(this.template(this.model.toJSON()));
    return this;
  };

  TrackView.prototype.remove = function() {
    return this.model.destroy();
  };

  TrackView.prototype.removed = function() {
    return this.$el.remove();
  };

  TrackView.prototype.changed = function(event) {
    var elem;
    elem = event.target;
    return this.model.set(elem.name, elem.value);
  };

  return TrackView;

})(Backbone.View);

$(document).ready(function() {
  Backbone.sync = function() {
    return null;
  };
  window.sheet = new Sheet;
  window.app = new AppView({
    sheet: sheet
  });
  return window.app.render();
});
